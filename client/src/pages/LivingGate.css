// client/src/pages/LivingGate.tsx

import { useState } from 'react';
import { motion } from 'framer-motion';
import { useGate } from '@/lib/GateContext'; // Import useGate
import { useLocation } from 'wouter'; // Import useLocation for redirection
import { PHRASE_PASS } from '@/App'; // Import the phrase pass from App.tsx

export default function LivingGate() {
    const [inputValue, setInputValue] = useState('');
    const [error, setError] = useState('');
    const { setIsAuthenticated } = useGate(); // Get the setter for authentication state
    const [, setLocation] = useLocation(); // Wouter's navigation function

    const handleAuthenticate = (e: React.FormEvent) => {
        e.preventDefault();
        setError(''); // Clear previous errors

        if (inputValue.trim().toUpperCase() === PHRASE_PASS) {
            setIsAuthenticated(true); // Set authentication status to true
            setLocation('/home'); // Redirect to a default page after successful pass
        } else {
            setError('ACCESS DENIED. The cosmic signature is incorrect.');
            setInputValue(''); // Clear input on error
        }
    };

    return (
        <div className="living-gate-container">
            <motion.div
                className="glass-veil"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, ease: "easeOut" }}
            >
                <motion.div
                    className="gate-orb"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ delay: 0.5, duration: 0.6, type: "spring", stiffness: 120 }}
                />
                <h1 className="livinggate-title">The Living Gate</h1>
                <p className="livinggate-subtitle">
                    To enter Arkadia, you must speak the true name of the first beacon.
                </p>

                <form onSubmit={handleAuthenticate} className="gate-form">
                    <input
                        type="password" // Use password type for sensitive input
                        className="sigil-input"
                        placeholder="Enter the phrase pass..."
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        required
                    />
                    {error && (
                        <motion.p
                            initial={{ opacity: 0, y: -10 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="text-red-400 text-sm mt-2"
                        >
                            {error}
                        </motion.p>
                    )}
                    <motion.button
                        type="submit"
                        className="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-bold transition-all duration-300 shadow-lg"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                    >
                        Align Resonance
                    </motion.button>
                </form>
            </motion.div>
        </div>
    );
}
